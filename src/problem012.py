""" Highly divisible triangular number
The sequence of triangle numbers is generated by adding the natural numbers.
So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
The first ten terms would be:
1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
Let us list the factors of the first seven triangle numbers:
 1: 1
 3: 1, 3
 6: 1, 2, 3, 6
10: 1, 2, 5, 10
15: 1, 3, 5, 15
21: 1, 3, 7, 21
28: 1, 2, 4, 7, 14, 28
We can see that 28 is the first triangle number to have over five divisors.
What is the value of the first triangle number to have over five hundred divisors?
"""

from math import sqrt

def num_of_divisors(i):
    """ Return the number of natural divisors of i.
        Iterating only from 2 to the square root of i, for every divisor
        under this root has a corresponding divisor above it. Add another
        divisor in case this root is a natural number itself.
    """
    divisors = 2 # 1 and i
    for n in xrange(2, int(sqrt(i))):
        if i % n == 0: divisors += 2
    if isinstance(sqrt(i), int): divisors + 1
    return divisors

def main():
    """ Triangular numbers can be obtained by the formula: i*(i+1)/2
    We'll iterate over these number until we'll find the one with more than
    N divisors.
    """
    N, i = 500, 2
    while True:
        if num_of_divisors(i * (i+1) / 2) > N: break
        i += 1
    print i * (i+1) / 2

if __name__ == '__main__':
    main()